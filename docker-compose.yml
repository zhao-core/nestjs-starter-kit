version: '3.8'

networks:
 nest-ssr-net:
    driver: bridge
services:

  # ### DB ################################################
  # postgresql:
  #   restart: always
  #   container_name: v_postgresql_nest_api
  #   #image: arm64v8/postgres:latest
  #   image: postgres:latest
  #   ports:
  #     - ${POSTGRES_PORT}:5432
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     PGDATA: /var/lib/postgresql/data/pgdata
  #   # healthcheck:
  #   #   test: ["CMD-SHELL", "netstat -tnlp|grep 5432 || exit 1"]
  #   #   interval: 10s
  #   #   timeout: 20s
  #   #   retries: 3
  #   networks:
  #     -nest-ssr-net

  ### Redis ################################################
  redis:
      image: arm64v8/redis:latest
      # image: redis:latest
      container_name: v_redis_nest_api
      command:
        - /bin/sh
        - -c
        # - Double dollars, so that the variable is not expanded by Docker Compose
        # - Surround by quotes, so that the shell does not split the password
        # - The ${variable:?message} syntax causes shell to exit with a non-zero
        #   code and print a message, when the variable is not set or empty
        - redis-server --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}"
      env_file:
        - ./.env
      # healthcheck:
      #   test: ["CMD-SHELL", "netstat -tnlp|grep 6379 || exit 1"]
      #   interval: 10s
      #   timeout: 20s
      #   retries: 3
      ports:
        - ${REDIS_PORT}:6379
      volumes:
        - /.docker/redis:/data
      networks:
        -nest-ssr-net
  
  mysql:
    image: mysql:8.4.2
    restart: always
    container_name: v_mysql_nest_api
    volumes:
      - ./.docker/data/mysql:/var/lib/mysql # 挂载目录，持久化存储
    ports:
      - ${MYSQL_PORT}:3306
    environment:
      TZ: Asia/Shanghai # 设置时区
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD} # 设置 root 用户的密码
      MYSQL_USER: ${MYSQL_USER} # 创建专用用户
      MYSQL_PASSWORD: ${MYSQL_PASSWORD} # 设置专用用户密码
      MYSQL_DATABASE: ${MYSQL_DB} # 自动创建数据库
    networks:
      -nest-ssr-net
    ### Mail trap ################################################
  mailhog:
    image: mailhog/mailhog
    restart: always
    ports: ['1025:1025', '8025:8025']
